#+BLOG: wordpress
#+POSTID: 255
#+DATE: [2016-06-23 Thu 18:04]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
#+CATEGORY: Emacs
#+TAGS:
#+DESCRIPTION:
#+TITLE: Some Emacs reminders/tricks

Some Emacs reminders, to be updated from time to time

* Emacs history

You can store your *compile commands*, *regex expressions*,... by telling to Emacs to store all these stuff.

Simply add 
#+BEGIN_SRC lisp
(savehist-mode 1)
(setq savehist-additional-variables '(compile-command kill-ring search-ring regexp-search-ring))
#+END_SRC
to your emacs configuration file

* Regex

When you use [[https://www.emacswiki.org/emacs/RegularExpression][regular expressions]], the commands like *M-x
regexp-builder*, *M-x find-grep-dired*, *M-x query-replace-regexp*...
have a tricky behavior. As best explained [[https://www.masteringemacs.org/article/re-builder-interactive-regexp-builder][here]], the default behavior
is *read* mode which requires "*double escaping*". For instance you
must type:
#+BEGIN_SRC lisp
\\(foo\\|bar\\)
#+END_SRC

It is much better to use the *string* mode which does not have this issue, for example:
#+BEGIN_SRC lisp
\(foo\|bar\)
#+END_SRC

You can either customize your default mode (*M-x customize-variable RET
reb-re-syntax RET*) or set the variable (*reb-re-syntax*) directly in your *emacs* configuration file:

#+BEGIN_SRC lisp
(require 're-builder)
(setq reb-re-syntax 'string)
#+END_SRC


* Clang-Emacs integration

The [[http://clang.llvm.org/docs/ClangFormat.html][doc]] says:

#+BEGIN_SRC lisp
(load "<path-to-clang>/tools/clang-format/clang-format.el")
(global-set-key [C-M-tab] 'clang-format-region)
#+END_SRC

It is certainly more convenient to:
- restrict this to C or/and C++ modes
- to format the whole buffer without having to select a region
this can be done by:

#+BEGIN_SRC lisp
(require 'clang-format)
(load "<path-to-clang>/tools/clang-format/clang-format.el")
(define-key c++-mode-map (kbd "<C-M-tab>") 'clang-format-buffer)
#+END_SRC

(personally I prefer "*<backtab>*" to "*<C-M-tab>*")

* Rectangular selection

You can select a rectangular region with *C-x space*.

# +CAPTION: Select a rectangular region
[[./rect.png]]

can be useful for *tabular data*...

* Misc

** Julia & ESS

If you want to start Julia with some command line options in [[http://ess.r-project.org/][Emacs Speaks Statistics (ESS)]], just use [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Prefix-Command-Arguments.html][a Emacs prefix argument]]. 

For instance

#+BEGIN_EXAMPLE
C-u M-x Julia
#+END_EXAMPLE

then ESS will prompt for "Starting Args ? ".

Enter (for example):

#+BEGIN_EXAMPLE
--depwarn=no --check-bounds=no
#+END_EXAMPLE

to suppress *method deprecation warnings* and *bounds checks*.

** Mathematica

Under Linux, by default I have some problems with cut/copy from
Mathematica to Emacs. I do not know the detail, but this problem was
solved by installing the *xclip* Emacs package.

For Mathematica editing *mode*, there is the good *wolfram-mode* emacs package.

To use Mathematica with org-babel there is [[https://github.com/overtone/emacs-live/blob/master/packs/stable/org-pack/lib/org-mode/contrib/lisp/ob-mathematica.el][ob-mathematica.el]], however I have modified the way it evaluates Mathematica expressions:

#+BEGIN_SRC lisp
(defun org-babel-expand-body:mathematica (body params)
  "Expand BODY according to PARAMS, return the expanded body."
  (let ((vars (mapcar #'cdr (org-babel-get-header params :var))))
    (concat
     (mapconcat ;; define any variables
      (lambda (pair)
	(format "%s=%s;"
		(car pair)
		(org-babel-mathematica-var-to-mathematica (cdr pair))))
      ;;
      ;; vars "\n") "\nPrint[\n" body "\n]\n")))
      ;;
      vars "\n") "\n" body "\n")))
#+END_SRC

The reason is that encapsulating all the instructions in one line can cause problems. For instance:
#+BEGIN_SRC mathematica :exports both
Needs["Units`"]; ConvertTemperature[20, Fahrenheit, Centigrade]
#+END_SRC

#+RESULTS:
: Centigrade::shdw: Symbol Centigrade appears in multiple contexts {Units`, Global`}; definitions in context Units` may shadow or be shadowed by other definitions.
: 
: ConvertTemperature::shdw: Symbol ConvertTemperature appears in multiple contexts {Units`, Global`}; definitions in context Units` may shadow or be shadowed by other definitions.
: 
: Fahrenheit::shdw: Symbol Fahrenheit appears in multiple contexts {Units`, Global`}; definitions in context Units` may shadow or be shadowed by other definitions.

With the modified *org-babel-expand-body:mathematica* function you do
not have this problem anymore. However, now you have to explicitly print what
you want as output. 

#+BEGIN_SRC mathematica :exports both
Needs["Units`"];
Print[ConvertTemperature[20, Fahrenheit, Centigrade]]
#+END_SRC 

#+RESULTS:
: -20/3

* Going faster

** Fast separator
#+BEGIN_SRC lisp
//////
//~~~~~~~~~~~~~~~~
//================================================================
#+END_SRC

Simply type:
- *C-U //*
- *C-U C-U ~*
- *C-U C-U C-U =*


** Search a word under the cursor

*C-s* is well known to initiate a forward search, however if you do
 *C-s C-w* you can directly search for the words under the cursor (you
 can type *C-w* several times if required).

** Format your line / comment
Simply use *M-Q*

** Navigate through buffers

The classical *C-x 0*, *C-x 1*, *C-x 2*, *C-x 3* to split screen, *C-x
O* to move between them, the *C-x +* to equalize their sizes and the
*C-x K* to kill one.

Also note that if you want to kill several buffers you can do *C-x
C-b*, select the buffers you want to close with *d* (and the cursor),
then press *x*.

** Insert shell command in your buffer

Example: *C-U M-! date* to insert the date (invokes shell *date* command)

** Copy your buffer name (with full-path) in the kill ring

Add 
#+BEGIN_SRC lisp
(defun copy-full-path-to-kill-ring ()
  "copy buffer's full path to kill ring"
  (interactive)
  (when buffer-file-name
    (kill-new (file-truename buffer-file-name))))
(global-set-key (kbd "<f1>") 'copy-full-path-to-kill-ring)
#+END_SRC

to you *emacs* file. You can use it by pressing *f1* and *C-y* to insert
*buffer-file-name* where you want.

** Rename a buffer and a file in the same time

From [[https://sites.google.com/site/steveyegge2/my-dot-emacs-file][this post]], add
#+BEGIN_SRC lisp
(defun rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " filename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'"
                   name (file-name-nondirectory new-name)))))))

(global-set-key (kbd "<f2>") 'rename-current-buffer-file)
#+END_SRC

to you *emacs* file. You can use it by pressing *f2*.

** Use greek letters

In *Julia language* for instance you can use *greek letters*. This can
be easily done with *M-g + letter*.  Found [[http://stackoverflow.com/questions/10192341/how-to-enter-greek-characters-in-emacs][in this stackoverflow post]],
just add this to your *.emacs* file.

#+BEGIN_SRC lisp
(global-set-key (kbd "M-g a") "α")
(global-set-key (kbd "M-g b") "β")
(global-set-key (kbd "M-g g") "γ")
(global-set-key (kbd "M-g d") "δ")
(global-set-key (kbd "M-g e") "ε")
(global-set-key (kbd "M-g z") "ζ")
(global-set-key (kbd "M-g h") "η")
(global-set-key (kbd "M-g q") "θ")
(global-set-key (kbd "M-g i") "ι")
(global-set-key (kbd "M-g k") "κ")
(global-set-key (kbd "M-g l") "λ")
(global-set-key (kbd "M-g m") "μ")
(global-set-key (kbd "M-g n") "ν")
(global-set-key (kbd "M-g x") "ξ")
(global-set-key (kbd "M-g o") "ο")
(global-set-key (kbd "M-g p") "π")
(global-set-key (kbd "M-g r") "ρ")
(global-set-key (kbd "M-g s") "σ")
(global-set-key (kbd "M-g t") "τ")
(global-set-key (kbd "M-g u") "υ")
(global-set-key (kbd "M-g f") "ϕ")
(global-set-key (kbd "M-g j") "φ")
(global-set-key (kbd "M-g c") "χ")
(global-set-key (kbd "M-g y") "ψ")
(global-set-key (kbd "M-g w") "ω")
(global-set-key (kbd "M-g A") "Α")
(global-set-key (kbd "M-g B") "Β")
(global-set-key (kbd "M-g G") "Γ")
(global-set-key (kbd "M-g D") "Δ")
(global-set-key (kbd "M-g E") "Ε")
(global-set-key (kbd "M-g Z") "Ζ")
(global-set-key (kbd "M-g H") "Η")
(global-set-key (kbd "M-g Q") "Θ")
(global-set-key (kbd "M-g I") "Ι")
(global-set-key (kbd "M-g K") "Κ")
(global-set-key (kbd "M-g L") "Λ")
(global-set-key (kbd "M-g M") "Μ")
(global-set-key (kbd "M-g N") "Ν")
(global-set-key (kbd "M-g X") "Ξ")
(global-set-key (kbd "M-g O") "Ο")
(global-set-key (kbd "M-g P") "Π")
(global-set-key (kbd "M-g R") "Ρ")
(global-set-key (kbd "M-g S") "Σ")
(global-set-key (kbd "M-g T") "Τ")
(global-set-key (kbd "M-g U") "Υ")
(global-set-key (kbd "M-g F") "Φ")
(global-set-key (kbd "M-g J") "Φ")
(global-set-key (kbd "M-g C") "Χ")
(global-set-key (kbd "M-g Y") "Ψ")
(global-set-key (kbd "M-g W") "Ω")
#+END_SRC


** Last but not least

There are plenty of great packages:

- use [[https://github.com/magit/magit][magit]]
- use [[http://orgmode.org/][orgmode]]
- use [[https://www.emacswiki.org/emacs/Yasnippet][Yasnippet]]
- use [[https://github.com/yaruopooner/ac-clang][ac-clang]] or [[https://www.emacswiki.org/emacs/AutoComplete][AutoComplete]]

Useful links:

- https://www.masteringemacs.org/
- https://www.emacswiki.org/emacs/SiteMap
- http://ergoemacs.org/

# ./rect.png http://pixorblog.files.wordpress.com/2016/06/rect1.png
